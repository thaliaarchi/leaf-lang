{(?
  Instruction encoding:
    + 1
    * 2
    < 3
    > 4
    ^ 5
    ( 6
    ) 7
    { 8
    } 9
    - 10
    ? 11
)}

{(?
{(? 6_conditional.leaf: *{(?+*)+} )}

2   +<+                   ^    *>
8  {+<+<+<+<+<+<+<+       (^)} *>
6  {+<+<+<+<+<+           (^)} *>
11 {+<+<+<+<+<+<+<+<+<+<+ (^)} *>
1   +                          *>
2   +<+                   ^    *>
7  {+<+<+<+<+<+<+         (^)} *>
1   +                          *>
9  {+<+<+<+<+<+<+<+<+     (^)} *>
)}

{(? +**>+><* )}
1   +                          *>
2   +<+                   ^    *>
2   +<+                   ^    *>
4   +<+<+<+               ^^^  *>
1   +                          *>
4   +<+<+<+               ^^^  *>
3   +<+<+                 ^^   *>
2   +<+                   ^    *>

{(?
  VM state:
  - pc         : marked with a root
  - success    : a right flag on bit 0 of the instruction
  - loop stack : a root for every loop head

  Tree state:
  - cursor     : a flag on each branch leading to the cursor
  - root stack : a number on each node indicating how many times it was pushed

                parent
                  |
                  .
                /   \
              .       … root count
            /   \      \
          .       .     …
         / \     / \
        ?   ?   ?   ?
      left    right
          cursor  cursor
)}

Initialization:

*>              Create slot for success flag
*> +< +*<+*     Initialize tree root as an empty node with root count of 1
(^)

{(?
  Instruction dispatch with ^(? ELSE <{>)>? THEN:

    ^(?         Break, if the cursor has reached the head of the opcode
      ELSE      Otherwise, move up and execute ELSE
      <{        Enter the opcode and set the root, so it cannot move right
    >)          Break
    >?          Break, if it cannot move right (i.e., ELSE was executed)
    THEN        Otherwise, execute THEN

  Seek to the cursor in the VM tree with (<<{{<>^(?>}{>)>>^(?>}{>)}?}^)}:

    (           Loop
      <<        Enter the node
      {{        Push two roots at the center of the node
      <>^(?     If the left child has a cursor flag,
        >}{     rebase in the flag to lock, so it fails the next condition
      >)
      >>^(?     If the right child has a cursor flag,
        >}{     rebase in the flag to lock
      >)
      }?}       Break, if it couldn't visit a child
      ^         Move out of the flag
    )
    }           Pop the root

)}

VM loop:

(
  {(<)?
  (^(?^(?^(?^(?^(?^(?^(?^(?^(?^(?^
    11 Break

    (>)
    (<<{{<>^(?>}{>)>>^(?>}{>)}?}^)}  Seek to the cursor
    TODO
    (^)

  <{>)>?
    10 Delete

    (>)
    (<<{{<>^(?>}{>)>>^(?>}{>)}?}^)}  Seek to the cursor
    TODO
    (^)

  <{>)>?
    9 Pop root

    (>)
    (<<{{<>^(?>}{>)>>^(?>}{>)}?}^)}  Seek to the cursor
    TODO
    (^)

  <{>)>?
    8 Push root

    (>)
    (<<{{<>^(?>}{>)>>^(?>}{>)}?}^)}  Seek to the cursor
    ^(>)*       Increment the root count
    (^)

  <{>)>?
    7 Loop tail

    (>)
    (<<{{<>^(?>}{>)>>^(?>}{>)}?}^)}  Seek to the cursor
    TODO
    (^)

  <{>)>?
    6 Loop head

    (>)
    (<<{{<>^(?>}{>)>>^(?>}{>)}?}^)}  Seek to the cursor
    TODO
    (^)

  <{>)>?
    5 Move up

    (>)
    (<<{{<>^(?>}{>)>>^(?>}{>)}?}^)}  Seek to the cursor
    TODO
    (^)

  <{>)>?
    4 Move right

    (>)^{+<->   Clear success
    (<<{{<>^(?>}{>)>>^(?>}{>)}?}^)}  Seek to the cursor
    >{<(?       If the right child exists,
      }^*       mark its cursor flag,
      (^)+      and mark success
    {)}
    }(^)

  <{>)>?
    3 Move left

    (>)^{+<->   Clear success
    (<<{{<>^(?>}{>)>>^(?>}{>)}?}^)}  Seek to the cursor
    <{<(?       If the left child exists,
      }^*       mark its cursor flag,
      (^)+      and mark success
    {)}
    }(^)

  <{>)>?
    2 New right

    (>)^+>      Mark success
    (<<{{<>^(?>}{>)>>^(?>}{>)}?}^)}  Seek to the cursor
    >+<+<+*     Create a new node to the left
    (^)

  <{>)>?
    1 New left

    (>)^+>      Mark success
    (<<{{<>^(?>}{>)>>^(?>}{>)}?}^)}  Seek to the cursor
    <+<+<+*     Create a new node to the left
    (^)

  <{>)
  }}^>
)}
